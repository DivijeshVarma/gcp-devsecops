steps:
  # Step 1: Install dependencies and run unit testss
  # These commands run from within the 'src' directory where package.json is located.
  - id: 'Install dependencies'
    name: 'node:20'
    entrypoint: npm
    args: ['ci']
    dir: 'src'

  - id: 'Run Unit Tests'
    name: 'gcr.io/cloud-builders/npm'
    args: ['test', '--', '--coverage'] # Add coverage to collect test results
    dir: 'src'

  # Step 2: SAST Scan using SonarCloud
  # Assuming the code to scan is at the root of the project. If not, adjust `dir`.
  - id: 'SAST Scan'
    name: 'sonarsource/sonar-scanner-cli:latest'
    entrypoint: 'sh'
    dir: 'src'
    args:
      - '-c'
      - |
        sonar-scanner -Dsonar.login=$_SONAR_TOKEN

  # Step 3: Build the Docker Image
  # The Dockerfile is at the project root, but the build context is 'src'.
  - id: 'Build the Image'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '$LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG'
      - '-f'
      - 'Dockerfile'
      - 'src' # Use 'src' as the build context
  
  # Step 4: Trivy Vulnerability Scan
  - id: 'Trivy Vulnerability Scan'
    name: 'aquasec/trivy'
    args:
      - 'image'
      - '--format=table'
      - '--exit-code=1'
      - '--ignore-unfixed'
      - '--vuln-type=os,library'
      - '--severity=CRITICAL,HIGH'
      - '$LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG'

  # Step 5: Push Image to Artifact Registry
  - id: 'Push Image'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '$LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG'

  - id: Create a cloud deploy release and this will also deploy the release to the first target ie test
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - -c
      - |
        gcloud deploy releases create r-$REVISION_ID --project=$PROJECT_ID --region=$LOCATION --delivery-pipeline=ci-cd-test --images=my-app-image=$LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd@$(cat /workspace/digest.txt)


  #Run DAST scan using OWASP ZAP in GCP DevSecOps Pipeline
  - id: DAST Scan using OWASP ZAP in GCP DevSecOps Pipeline
    name: 'ubuntu'
    entrypoint: bash
    args: 
      - '-c'
      - |-
        apt-get update
        apt-get -y install wget
        apt-get -y install default-jdk
        wget https://github.com/zaproxy/zaproxy/releases/download/v2.16.0/ZAP_2.16.0_Linux.tar.gz
        tar -xvf ZAP_2.16.0_Linux.tar.gz
        cd ZAP_2.16.0
        ./zap.sh -cmd -quickurl http://infotechnologies.org -quickprogress -quickout ../zap_report.html 



  - id: Promote/deploy cloud deploy release to next stage ie staging
    name: gcr.io/cloud-builders/gcloud
    args: ['deploy', 'releases', 'promote', '--release=r-$REVISION_ID','--project=$PROJECT_ID','--region=$LOCATION','--delivery-pipeline=ci-cd-test', '--to-target=staging']

  - id: Promote/deploy cloud deploy release to next stage ie prod
    name: gcr.io/cloud-builders/gcloud
    args: ['deploy', 'releases', 'promote', '--release=r-$REVISION_ID','--project=$PROJECT_ID','--region=$LOCATION','--delivery-pipeline=ci-cd-test', '--to-target=prod']
images: ['$LOCATION-docker.pkg.dev/$PROJECT_ID/$_CONTAINER_REPO_NAME/cd:$_VERSION_TAG']

options:
  logging: CLOUD_LOGGING_ONLY


#Store Reports Generated by OWASP ZAP in GCP Cloud Bucket named ASecurityGuru
artifacts:
  objects:
    location: 'gs://bucket-1756012902'
    paths:
      - zap_report.html

substitutions:
  _CONTAINER_REPO_NAME: test-repo     # or whatever your repo is called
  _VERSION_TAG: $TAG_NAME             # or $SHORT_SHA or v1.0.0
